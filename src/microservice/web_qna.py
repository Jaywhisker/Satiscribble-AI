from utils.mongoDBManager import MongoDBManager
from utils.chromaDBManager import ChromaDBManager
from utils.formatData import *
from utils.gptManager import *


async def web_query(question:str, minutes_id:str, chat_history_id:str):
    """
    Return a short statemenet on the question asked. The context is based on the chat history that the user has.

    Args:
        question (string): the current question asked by the user
        minutes_id (string): document id in minutes collection
        chat_history_id (string): document id in chatHistory collection
    Return:
        String response generated by openai
        updates the database as well
    """
    mongoDB = MongoDBManager(minutes_id, chat_history_id)
    chat_history = mongoDB.read_MongoDB('chatHistory', False, None, 'web')

    if len(chat_history.get('web', [])) != 0:
        formattedChatHistory = formatChatHistory(chat_history.get('web', []))
    else:
        formattedChatHistory = []

    # Prepare the list of context to sendgpt
    #  
    response = await webQuery(question, formattedChatHistory)
    query_resp_pair = {'user': question, 'assistant': response}
    status = await mongoDB.update_chat_history(query_resp_pair, 'web')
    return {'response': response}




    # openai.api_key = os.environ['OPENAI_API_KEY']
    # query_message = [
    # {"role": "system", "content": "You are an Simple question and answer Model. You do not have individuality, opinion or a personality. You will receive a question. Answer the question in the most straight forwawrd way possible. Minimising words where possible. Try and keep responses below 50 words."},
    # ]
    # for QAPair in existing_minutes['web']:
    #     query_message.append({"role": "user", "content": QAPair['user']})
    #     query_message.append({"role": "assistant", "content": QAPair['assistant']})
    # query_message.append({"role": "user", "content": question})
    # response = openai.ChatCompletion.create(
    #     model="gpt-3.5-turbo",
    #     messages= query_message,
    #     temperature=0.2
    #     )
    # newARPair = {'user': question, 'assistant': response['choices'][0]['message']['content']}
    # status = await mongoDB.update_chat_history(newARPair, 'web')
    # # await asyncio.sleep(5)
    # # print("TopicTrackerResponse")
    # result = (response['choices'][0]['message']['content'])
    # return {'response': response}


# Upgrade the function